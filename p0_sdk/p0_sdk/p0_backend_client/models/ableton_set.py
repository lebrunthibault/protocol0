# coding: utf-8

"""
    p0_backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from p0_backend_client.configuration import Configuration


class AbletonSet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'path': 'str',
        'title': 'str',
        'muted': 'bool',
        'current_track': 'AbletonTrack',
        'selected_track': 'AbletonTrack',
        'track_count': 'int',
        'drum_rack_visible': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'path': 'path',
        'title': 'title',
        'muted': 'muted',
        'current_track': 'current_track',
        'selected_track': 'selected_track',
        'track_count': 'track_count',
        'drum_rack_visible': 'drum_rack_visible'
    }

    def __init__(self, id=None, path=None, title=None, muted=None, current_track=None, selected_track=None, track_count=None, drum_rack_visible=None, local_vars_configuration=None):  # noqa: E501
        """AbletonSet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._path = None
        self._title = None
        self._muted = None
        self._current_track = None
        self._selected_track = None
        self._track_count = None
        self._drum_rack_visible = None
        self.discriminator = None

        self.id = id
        if path is not None:
            self.path = path
        if title is not None:
            self.title = title
        self.muted = muted
        self.current_track = current_track
        self.selected_track = selected_track
        self.track_count = track_count
        self.drum_rack_visible = drum_rack_visible

    @property
    def id(self):
        """Gets the id of this AbletonSet.  # noqa: E501


        :return: The id of this AbletonSet.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbletonSet.


        :param id: The id of this AbletonSet.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def path(self):
        """Gets the path of this AbletonSet.  # noqa: E501


        :return: The path of this AbletonSet.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AbletonSet.


        :param path: The path of this AbletonSet.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def title(self):
        """Gets the title of this AbletonSet.  # noqa: E501


        :return: The title of this AbletonSet.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AbletonSet.


        :param title: The title of this AbletonSet.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def muted(self):
        """Gets the muted of this AbletonSet.  # noqa: E501


        :return: The muted of this AbletonSet.  # noqa: E501
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this AbletonSet.


        :param muted: The muted of this AbletonSet.  # noqa: E501
        :type muted: bool
        """
        if self.local_vars_configuration.client_side_validation and muted is None:  # noqa: E501
            raise ValueError("Invalid value for `muted`, must not be `None`")  # noqa: E501

        self._muted = muted

    @property
    def current_track(self):
        """Gets the current_track of this AbletonSet.  # noqa: E501


        :return: The current_track of this AbletonSet.  # noqa: E501
        :rtype: AbletonTrack
        """
        return self._current_track

    @current_track.setter
    def current_track(self, current_track):
        """Sets the current_track of this AbletonSet.


        :param current_track: The current_track of this AbletonSet.  # noqa: E501
        :type current_track: AbletonTrack
        """
        if self.local_vars_configuration.client_side_validation and current_track is None:  # noqa: E501
            raise ValueError("Invalid value for `current_track`, must not be `None`")  # noqa: E501

        self._current_track = current_track

    @property
    def selected_track(self):
        """Gets the selected_track of this AbletonSet.  # noqa: E501


        :return: The selected_track of this AbletonSet.  # noqa: E501
        :rtype: AbletonTrack
        """
        return self._selected_track

    @selected_track.setter
    def selected_track(self, selected_track):
        """Sets the selected_track of this AbletonSet.


        :param selected_track: The selected_track of this AbletonSet.  # noqa: E501
        :type selected_track: AbletonTrack
        """
        if self.local_vars_configuration.client_side_validation and selected_track is None:  # noqa: E501
            raise ValueError("Invalid value for `selected_track`, must not be `None`")  # noqa: E501

        self._selected_track = selected_track

    @property
    def track_count(self):
        """Gets the track_count of this AbletonSet.  # noqa: E501


        :return: The track_count of this AbletonSet.  # noqa: E501
        :rtype: int
        """
        return self._track_count

    @track_count.setter
    def track_count(self, track_count):
        """Sets the track_count of this AbletonSet.


        :param track_count: The track_count of this AbletonSet.  # noqa: E501
        :type track_count: int
        """
        if self.local_vars_configuration.client_side_validation and track_count is None:  # noqa: E501
            raise ValueError("Invalid value for `track_count`, must not be `None`")  # noqa: E501

        self._track_count = track_count

    @property
    def drum_rack_visible(self):
        """Gets the drum_rack_visible of this AbletonSet.  # noqa: E501


        :return: The drum_rack_visible of this AbletonSet.  # noqa: E501
        :rtype: bool
        """
        return self._drum_rack_visible

    @drum_rack_visible.setter
    def drum_rack_visible(self, drum_rack_visible):
        """Sets the drum_rack_visible of this AbletonSet.


        :param drum_rack_visible: The drum_rack_visible of this AbletonSet.  # noqa: E501
        :type drum_rack_visible: bool
        """
        if self.local_vars_configuration.client_side_validation and drum_rack_visible is None:  # noqa: E501
            raise ValueError("Invalid value for `drum_rack_visible`, must not be `None`")  # noqa: E501

        self._drum_rack_visible = drum_rack_visible

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbletonSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbletonSet):
            return True

        return self.to_dict() != other.to_dict()
