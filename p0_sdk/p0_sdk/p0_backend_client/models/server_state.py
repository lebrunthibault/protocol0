# coding: utf-8

"""
    p0_backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from p0_backend_client.configuration import Configuration


class ServerState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'set': 'AbletonSet',
        'set_shortcuts': 'list[str]',
        'sample_categories': 'dict(str, list[str])',
        'favorite_device_names': 'list[list[FavoriteDeviceNamesInnerInner]]'
    }

    attribute_map = {
        'set': 'set',
        'set_shortcuts': 'set_shortcuts',
        'sample_categories': 'sample_categories',
        'favorite_device_names': 'favorite_device_names'
    }

    def __init__(self, set=None, set_shortcuts=None, sample_categories=None, favorite_device_names=None, local_vars_configuration=None):  # noqa: E501
        """ServerState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._set = None
        self._set_shortcuts = None
        self._sample_categories = None
        self._favorite_device_names = None
        self.discriminator = None

        if set is not None:
            self.set = set
        self.set_shortcuts = set_shortcuts
        self.sample_categories = sample_categories
        self.favorite_device_names = favorite_device_names

    @property
    def set(self):
        """Gets the set of this ServerState.  # noqa: E501


        :return: The set of this ServerState.  # noqa: E501
        :rtype: AbletonSet
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this ServerState.


        :param set: The set of this ServerState.  # noqa: E501
        :type set: AbletonSet
        """

        self._set = set

    @property
    def set_shortcuts(self):
        """Gets the set_shortcuts of this ServerState.  # noqa: E501


        :return: The set_shortcuts of this ServerState.  # noqa: E501
        :rtype: list[str]
        """
        return self._set_shortcuts

    @set_shortcuts.setter
    def set_shortcuts(self, set_shortcuts):
        """Sets the set_shortcuts of this ServerState.


        :param set_shortcuts: The set_shortcuts of this ServerState.  # noqa: E501
        :type set_shortcuts: list[str]
        """
        if self.local_vars_configuration.client_side_validation and set_shortcuts is None:  # noqa: E501
            raise ValueError("Invalid value for `set_shortcuts`, must not be `None`")  # noqa: E501

        self._set_shortcuts = set_shortcuts

    @property
    def sample_categories(self):
        """Gets the sample_categories of this ServerState.  # noqa: E501


        :return: The sample_categories of this ServerState.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._sample_categories

    @sample_categories.setter
    def sample_categories(self, sample_categories):
        """Sets the sample_categories of this ServerState.


        :param sample_categories: The sample_categories of this ServerState.  # noqa: E501
        :type sample_categories: dict(str, list[str])
        """
        if self.local_vars_configuration.client_side_validation and sample_categories is None:  # noqa: E501
            raise ValueError("Invalid value for `sample_categories`, must not be `None`")  # noqa: E501

        self._sample_categories = sample_categories

    @property
    def favorite_device_names(self):
        """Gets the favorite_device_names of this ServerState.  # noqa: E501


        :return: The favorite_device_names of this ServerState.  # noqa: E501
        :rtype: list[list[FavoriteDeviceNamesInnerInner]]
        """
        return self._favorite_device_names

    @favorite_device_names.setter
    def favorite_device_names(self, favorite_device_names):
        """Sets the favorite_device_names of this ServerState.


        :param favorite_device_names: The favorite_device_names of this ServerState.  # noqa: E501
        :type favorite_device_names: list[list[FavoriteDeviceNamesInnerInner]]
        """
        if self.local_vars_configuration.client_side_validation and favorite_device_names is None:  # noqa: E501
            raise ValueError("Invalid value for `favorite_device_names`, must not be `None`")  # noqa: E501

        self._favorite_device_names = favorite_device_names

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServerState):
            return True

        return self.to_dict() != other.to_dict()
